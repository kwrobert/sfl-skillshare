---
# Source: prefect-server/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prefect-server-serviceaccount
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: prefect-server/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: prefect-server-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.3.4
    app.kubernetes.io/instance: prefect-server
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql-password: "TG96S3l4U0VBMA=="
---
# Source: prefect-server/charts/postgresql/templates/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prefect-server-postgresql-init-scripts
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.3.4
    app.kubernetes.io/instance: prefect-server
    app.kubernetes.io/managed-by: Helm
data:
  create_pgcrypto.sql: |
    -- create pgcrypto extension, required for Hasura UUID
    CREATE EXTENSION IF NOT EXISTS pgcrypto;
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    SET TIME ZONE 'UTC';
---
# Source: prefect-server/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-server-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.3.4
    app.kubernetes.io/instance: prefect-server
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: prefect-server
---
# Source: prefect-server/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-server-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.3.4
    app.kubernetes.io/instance: prefect-server
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: prefect-server
    role: master
---
# Source: prefect-server/templates/apollo/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-server-apollo
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apollo
  annotations:
    {}
spec:
  type: NodePort
  ports:
    - port: 4200
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    app.kubernetes.io/component: apollo
---
# Source: prefect-server/templates/graphql/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-server-graphql
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: graphql
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 4201
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    app.kubernetes.io/component: graphql
---
# Source: prefect-server/templates/hasura/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-server-hasura
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: hasura
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    app.kubernetes.io/component: hasura
---
# Source: prefect-server/templates/ui/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-server-ui
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ui
  annotations:
    {}
spec:
  type: NodePort
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    app.kubernetes.io/component: ui
---
# Source: prefect-server/templates/apollo/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-server-apollo
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apollo
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prefect-server
      app.kubernetes.io/instance:  prefect-server
      app.kubernetes.io/component: apollo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        app.kubernetes.io/instance:  prefect-server
        app.kubernetes.io/component: apollo
    spec:
      imagePullSecrets: [{"name":"regcred"}]
      serviceAccountName: prefect-server-serviceaccount
      containers:
        - name: apollo
          image: "410118848099.dkr.ecr.us-east-1.amazonaws.com/prefecthq/apollo:latest"
          imagePullPolicy: Always
          command:
            - bash
            - "-c"
            - "/apollo/post-start.sh && npm run serve"
          env:
            - name: HASURA_API_URL
              value: http://prefect-server-hasura.default:3000/v1alpha1/graphql
            - name: PREFECT_API_URL
              value: http://prefect-server-graphql.default:4201/graphql/
            - name: PREFECT_API_HEALTH_URL
              value: http://prefect-server-graphql.default:4201/health
            - name: GRAPHQL_SERVICE_HOST
              value: "http://prefect-server-graphql.default"
            - name: GRAPHQL_SERVICE_PORT
              value: "4201"
            - name: PREFECT_SERVER__API__URL
              value: http://prefect-server-hasura.default:3000/v1alpha1/graphql
            - name: PREFECT_SERVER__DATABASE__HOST
              value: prefect-server-postgresql.default
            - name: PREFECT_SERVER__DATABASE__PORT
              value: "5432"
            - name: PREFECT_SERVER__DATABASE__USERNAME
              value: prefect
            - name: PREFECT_SERVER__DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-server-postgresql
                  key: postgresql-password
            - name: PREFECT_SERVER__HASURA__HOST
              value: prefect-server-hasura.default
            - name: PREFECT_SERVER__HASURA__PORT
              value: "3000"
            - name: PREFECT_SERVER__SERVICES__APOLLO__PORT
              value: "4200"
            - name: PREFECT_SERVER__SERVICES__GRAPHQL__PORT
              value: "4201"
            - name: PREFECT_SERVER__DEBUG
              value: "true"
            
          ports:
            - name: http
              containerPort: 4200
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /.well-known/apollo/server-health
              port: http
          readinessProbe:
            httpGet:
              path: /.well-known/apollo/server-health
              port: http
---
# Source: prefect-server/templates/graphql/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-server-graphql
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: graphql
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prefect-server
      app.kubernetes.io/instance:  prefect-server
      app.kubernetes.io/component: graphql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        app.kubernetes.io/instance:  prefect-server
        app.kubernetes.io/component: graphql
    spec:
      imagePullSecrets: [{"name":"regcred"}]
      serviceAccountName: prefect-server-serviceaccount
      initContainers:
        - name: db-upgrade
          image: "410118848099.dkr.ecr.us-east-1.amazonaws.com/prefecthq/server:latest"
          imagePullPolicy: Always
          command:
            - "bash"
            - "-c"
            - "/usr/local/bin/prefect-server database upgrade --yes"
          env:
            - name: PREFECT_SERVER__DATABASE__CONNECTION_URL
              value: postgresql://prefect@prefect-server-postgresql.default:5432/prefect
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-server-postgresql
                  key: postgresql-password
            - name: PREFECT_SERVER__HASURA__HOST
              value: prefect-server-hasura.default
            - name: PREFECT_SERVER__API__URL
              value: http://prefect-server-hasura.default:3000/v1alpha1/graphql
            - name: PREFECT_SERVER__DATABASE__HOST
              value: prefect-server-postgresql.default
            - name: PREFECT_SERVER__DATABASE__PORT
              value: "5432"
            - name: PREFECT_SERVER__DATABASE__USERNAME
              value: prefect
            - name: PREFECT_SERVER__DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-server-postgresql
                  key: postgresql-password
            - name: PREFECT_SERVER__HASURA__HOST
              value: prefect-server-hasura.default
            - name: PREFECT_SERVER__HASURA__PORT
              value: "3000"
            - name: PREFECT_SERVER__SERVICES__APOLLO__PORT
              value: "4200"
            - name: PREFECT_SERVER__SERVICES__GRAPHQL__PORT
              value: "4201"
            - name: PREFECT_SERVER__DEBUG
              value: "true"
            
      containers:
        - name: graphql
          image: "410118848099.dkr.ecr.us-east-1.amazonaws.com/prefecthq/server:latest"
          imagePullPolicy: Always
          command: 
            - bash 
            - "-c" 
            - "python src/prefect_server/services/graphql/server.py"
          env:
            - name: PREFECT_SERVER_DB_CMD
              value: "echo 'DATABASE MIGRATIONS SKIPPED'"
            - name: PREFECT_SERVER__DATABASE__CONNECTION_URL
              value: postgresql://prefect@prefect-server-postgresql.default:5432/prefect
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-server-postgresql
                  key: postgresql-password            
            - name: PREFECT_SERVER__HASURA__HOST
              value: prefect-server-hasura.default
            - name: PREFECT_SERVER__API__URL
              value: http://prefect-server-hasura.default:3000/v1alpha1/graphql
            - name: PREFECT_SERVER__DATABASE__HOST
              value: prefect-server-postgresql.default
            - name: PREFECT_SERVER__DATABASE__PORT
              value: "5432"
            - name: PREFECT_SERVER__DATABASE__USERNAME
              value: prefect
            - name: PREFECT_SERVER__DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-server-postgresql
                  key: postgresql-password
            - name: PREFECT_SERVER__HASURA__HOST
              value: prefect-server-hasura.default
            - name: PREFECT_SERVER__HASURA__PORT
              value: "3000"
            - name: PREFECT_SERVER__SERVICES__APOLLO__PORT
              value: "4200"
            - name: PREFECT_SERVER__SERVICES__GRAPHQL__PORT
              value: "4201"
            - name: PREFECT_SERVER__DEBUG
              value: "true"
            
          ports:
            - name: http
              containerPort: 4201
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
---
# Source: prefect-server/templates/hasura/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-server-hasura
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: hasura
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prefect-server
      app.kubernetes.io/instance:  prefect-server
      app.kubernetes.io/component: hasura
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        app.kubernetes.io/instance:  prefect-server
        app.kubernetes.io/component: hasura
    spec:
      imagePullSecrets: [{"name":"regcred"}]
      serviceAccountName: prefect-server-serviceaccount
      containers:
        - name: hasura
          image: hasura/graphql-engine:v1.3.3
          imagePullPolicy: IfNotPresent
          command:
            - "graphql-engine" 
            - "serve"
          env:
            - name: HASURA_GRAPHQL_DATABASE_URL
              value: postgresql://prefect@prefect-server-postgresql.default:5432/prefect
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-server-postgresql
                  key: postgresql-password            
            - name: HASURA_GRAPHQL_ENABLE_CONSOLE
              value: "true"
            - name: HASURA_GRAPHQL_SERVER_PORT
              value: "3000"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
---
# Source: prefect-server/templates/towel/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-server-towel
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: towel
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prefect-server
      app.kubernetes.io/instance:  prefect-server
      app.kubernetes.io/component: towel
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        app.kubernetes.io/instance:  prefect-server
        app.kubernetes.io/component: towel
    spec:
      imagePullSecrets: [{"name":"regcred"}]
      serviceAccountName: prefect-server-serviceaccount
      containers:
        - name: towel
          image: "410118848099.dkr.ecr.us-east-1.amazonaws.com/prefecthq/server:latest"
          imagePullPolicy: Always
          command:
            - python 
            - src/prefect_server/services/towel/__main__.py
          env:
            - name: PREFECT_SERVER__HASURA__HOST
              value: prefect-server-hasura.default
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-server-postgresql
                  key: postgresql-password
---
# Source: prefect-server/templates/ui/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-server-ui
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ui
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prefect-server
      app.kubernetes.io/instance:  prefect-server
      app.kubernetes.io/component: ui
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        app.kubernetes.io/instance:  prefect-server
        app.kubernetes.io/component: ui
    spec:
      imagePullSecrets: [{"name":"regcred"}]
      serviceAccountName: prefect-server-serviceaccount
      containers:
        - name: ui
          image: "410118848099.dkr.ecr.us-east-1.amazonaws.com/prefecthq/ui:latest"
          imagePullPolicy: Always
          command: 
            - "/intercept.sh"
          env:
            - name: PREFECT_SERVER__APOLLO_URL
              value: http://prefect-apollo.krobzaur.com:4200/graphql
            - name: PREFECT_SERVER__BASE_URL
              value: http://prefect-apollo.krobzaur.com:4200/graphql
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
---
# Source: prefect-server/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prefect-server-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.3.4
    app.kubernetes.io/instance: prefect-server
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  serviceName: prefect-server-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: prefect-server
      role: master
  template:
    metadata:
      name: prefect-server-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-9.3.4
        app.kubernetes.io/instance: prefect-server
        app.kubernetes.io/managed-by: Helm
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: prefect-server-postgresql
          image: docker.io/bitnami/postgresql:11.9.0-debian-10-r1
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: POSTGRESQL_INITSCRIPTS_USERNAME
              value: postgres
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "prefect"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-server-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "prefect"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "prefect" -d "dbname=prefect" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "prefect" -d "dbname=prefect" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: custom-init-scripts
          configMap:
            name: prefect-server-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
        - name: data
          emptyDir: {}
---
# Source: prefect-server/templates/jobs/create_tenant.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: prefect-server-create-tenant-job
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: create-tenant-job
  annotations:
    {}
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        app.kubernetes.io/instance:  prefect-server
        app.kubernetes.io/component: create-tenant-job
    spec:
      imagePullSecrets: [{"name":"regcred"}]
      containers:
        - name: create-tenant
          image: "410118848099.dkr.ecr.us-east-1.amazonaws.com/prefecthq/prefect:latest"
          imagePullPolicy: Always
          command:
            - "bash"
            - "-c"
            - "prefect server create-tenant --name sfl --slug sfl || [[ $(prefect server create-tenant --name sfl --slug sfl  2>&1) =~ 'Uniqueness violation' ]]"
          env:
            - name: PREFECT__CLOUD__GRAPHQL
              value: http://prefect-server-apollo.default:4200/graphql
            - name: PREFECT__BACKEND
              value: server
      restartPolicy: OnFailure
  backoffLimit: 10
---
# Source: prefect-server/templates/apollo/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: prefect-server-apollo
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    kubernetes.io/ingress.class: alb
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apollo
spec:
  rules:
    - host: "prefect-apollo.krobzaur.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: prefect-server-apollo
              servicePort: 4200
---
# Source: prefect-server/templates/ui/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: prefect-server-ui
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    kubernetes.io/ingress.class: alb
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect-server
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ui
spec:
  rules:
    - host: "prefect-ui.krobzaur.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: prefect-server-ui
              servicePort: 8080
